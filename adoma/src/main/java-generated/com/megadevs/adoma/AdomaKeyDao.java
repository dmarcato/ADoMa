package com.megadevs.adoma;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.megadevs.adoma.AdomaKey;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table ADOMA_KEY.
*/
public class AdomaKeyDao extends AbstractDao<AdomaKey, String> {

    public static final String TABLENAME = "ADOMA_KEY";

    /**
     * Properties of entity AdomaKey.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property InternalKey =new Property(0, String.class , "internalKey", true, "_key");
        public final static Property LastUpdate =new Property(1, java.util.Date.class , "lastUpdate", false, "LAST_UPDATE");
        public final static Property __data =new Property(2, byte[].class , "__data", false, "__DATA");
    };


    public AdomaKeyDao(DaoConfig config) {
        super(config);
    }

    public AdomaKeyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ADOMA_KEY' (" + //
                "'_key' TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: internalKey
                "'LAST_UPDATE' INTEGER," + // 1: lastUpdate
                "'__DATA' BLOB);"); // 2: __data
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ADOMA_KEY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AdomaKey entity) {
        stmt.clearBindings();
        entity.onBeforeSave();
 
        String internalKey = entity.getInternalKey();
        if (internalKey != null) {
            stmt.bindString(1, internalKey);

        }
 
        java.util.Date lastUpdate = entity.getLastUpdate();
        if (lastUpdate != null) {
            stmt.bindLong(2, lastUpdate.getTime());

        }
 
        byte[] __data = entity.get__data();
        if (__data != null) {
            stmt.bindBlob(3, __data);

        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public AdomaKey readEntity(Cursor cursor, int offset) {
        AdomaKey entity = new AdomaKey( //

            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0) , // internalKey
            cursor.isNull(offset + 1) ? null : new java.util.Date( cursor.getLong(offset + 1) ) , // lastUpdate
            cursor.isNull(offset + 2) ? null : cursor.getBlob(offset + 2) // __data
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AdomaKey entity, int offset) {
        entity.setInternalKey(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0) );
        entity.setLastUpdate(cursor.isNull(offset + 1) ? null : new java.util.Date( cursor.getLong(offset + 1) ) );
        entity.set__data(cursor.isNull(offset + 2) ? null : cursor.getBlob(offset + 2) );
     }

    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(AdomaKey entity, long rowId) {
        return entity.getInternalKey();
    }

    /** @inheritdoc */
    @Override
    public String getKey(AdomaKey entity) {
        if(entity != null) {
            return entity.getInternalKey();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
