package com.megadevs.adoma;



// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here

import com.megadevs.adoma.events.CancelEvent;
import com.megadevs.adoma.events.CompleteEvent;
import com.megadevs.adoma.events.CreateEvent;
import com.megadevs.adoma.events.ErrorEvent;
import com.megadevs.adoma.events.PauseEvent;
import com.megadevs.adoma.events.ResumeEvent;
import com.megadevs.adoma.events.UpdateEvent;

import java.util.Date;
import java.util.Random;
// KEEP INCLUDES END
/**
 * Entity mapped to table ADOMA_KEY.
 */
public class AdomaKey extends AdomaKeyBase  implements java.lang.Comparable<AdomaKey>, com.megadevs.adoma.DownloaderData.OnDataUpdateListener {
    // KEEP FIELDS - put your custom fields here
    private transient Downloader downloader;
    private transient boolean inited = false;
    // KEEP FIELDS END
    public AdomaKey() {
    }

    public AdomaKey(String internalKey) {
        super(internalKey);
    }

    public AdomaKey(String internalKey, java.util.Date lastUpdate, byte[] __data) {
        super(internalKey, lastUpdate, __data);
    }

    // KEEP METHODS - put your custom methods here

    public void init() {
        long rand = new Random(System.nanoTime()).nextLong();
        internalKey = new String(String.valueOf(rand)).intern(); // if not wrapped into new string, String.valueOf() may set an internal offset of 2 (that voids every equals() check :/)
        __init();
    }

    public void init(String key) {
        internalKey = key.intern();
        __init();
    }

    private void __init() {
        getData().setOnDataUpdateListener(this);
        initDownloader();
        inited = true;
    }

    void merge(AdomaKey other) {
        if (other != null && other.equals(this) && other.lastUpdate.after(lastUpdate)) {
            setData(new DownloaderData(other.getData()));
            lastUpdate = other.lastUpdate;
        }
    }

    private Downloader getDownloader() {
        if (downloader == null) {
            try {
                downloader = getData().getDownloaderClass().newInstance();
            } catch (Exception e) {
                downloader = new BaseDownloader();
            }
            downloader.setKey(this);
        }
        return downloader;
    }

    private void initDownloader() {
        if (getData().getStatus() == DownloaderData.Status.RUNNING) {
            getData().setStatus(DownloaderData.Status.INITED);
            getDownloader().resume();
        }
    }

    public void pause() {
        getDownloader().pause();
        postIfInited(new PauseEvent(this));
    }

    public void resume() {
        getDownloader().resume();
        postIfInited(new ResumeEvent(this));
    }

    public void cancel() {
        getDownloader().cancel();
        postIfInited(new CancelEvent(this));
    }

    public void onError(String message) {
        postIfInited(new ErrorEvent(this, message));
    }

    public void onComplete() {
        postIfInited(new CompleteEvent(this));
    }

    public void onCreate() {
        postIfInited(new CreateEvent(this));
    }

    @Override
    public void onDataUpdate() {
        setLastUpdate(new Date(System.currentTimeMillis()));
        postIfInited(new UpdateEvent(this));
    }

    private void postIfInited(Object event) {
        if (inited) {
            Adoma.postToInternalEventBus(event);
            if (!(event instanceof UpdateEvent)) {
                Adoma.postToExternalEventBus(event);
            }
        }
    }

    @Override
    public DownloaderData getData() {
        DownloaderData data = super.getData();
        if (data == null) {
            data = new DownloaderData();
            setData(data);
        }
        return data;
    }

    @Override
    public String toString() {
        return getInternalKey();
    }

    @Override
    public int hashCode() {
        return getInternalKey().hashCode();
    }

    @Override
    public boolean equals(Object o) {
        return (this == o) || (o instanceof AdomaKey && getInternalKey().equals(((AdomaKey)o).getInternalKey()));
    }

    @Override
    public int compareTo(AdomaKey another) {
        return getInternalKey().compareTo(another.getInternalKey());
    }
    // KEEP METHODS END

}
